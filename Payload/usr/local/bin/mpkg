#!/bin/bash
args=$1
pkg=$2
ROOTFS="/"
LIBRARY=$ROOTFS"usr/local/mpkglib"
SEDLIB="\\/usr\\/local\\/mpkglib\\/temp\\/Payload\\/"
function checkLocalSignature() {
	if [[ ! -e $LIBRARY/temp/Info/pkgsign ]]; then
			if [[ $4 == "--nosignaturecheck" ]]; then
				echo "Skipped signature check."
				echo "!!!!INSTALLING UNSIGNED PACKAGE MAY BE DANGEROUS!!!!"
			else
				echo "E:20"
				echo "No signature file."
				sudo rm -r $LIBRARY/temp
				sudo rm $LIBRARY/lock
				exit
			fi
		else
			if [[ -z $(<$LIBRARY/temp/Info/pkgsign) ]]; then
				if [[ $4 == "--nosignaturecheck" ]]; then
					echo "Skipped signature check."
					echo "!!!!INSTALLING UNSIGNED PACKAGE MAY BE DANGEROUS!!!!"
				else
					echo "E:27"
					echo "Empty signature data. Unable to continue."
					sudo rm -r $LIBRARY/temp
					sudo rm $LIBRARY/lock
					exit
				fi

			else
				signdat=$(<$LIBRARY/temp/Info/pkgsign)
				if [[ -z $(md5 $LIBRARY/temp/Payload.zip | grep $signdat) ]]; then
					if [[ $4 == "--nosignaturecheck" ]]; then
						echo "Skipped signature check."
						echo "!!!!INSTALLING UNSIGNED PACKAGE MAY BE DANGEROUS!!!!"
					else
						echo "E:21"
						echo "Invalid signature data. Unable to continue."
						sudo rm -r $LIBRARY/temp
						sudo rm $LIBRARY/lock
						exit
					fi
				fi
			fi
		fi
}

function dependencyCheck() {
	echo "Checking for dependencies..."
	if [[ -e $LIBRARY/temp/Info/depends ]]; then
		echo "This package depends: "$(cat $LIBRARY/temp/Info/depends)
		declare -i loopset=$(wc -l < $LIBRARY/temp/Info/depends)
		declare -i loopProgress=0
		echo "Total dependencies required:" $loopset
		echo "Checking dependencies installation..."
		while [[ $loopset -gt $loopProgress ]]; do
			loopProgress=$(( $loopProgress + 1 ))
			if [[ -z $(awk -v line=$loopProgress 'NR==line' $LIBRARY/temp/Info/depends) ]]; then
				echo "Warning: Dependency list has empty line: " $(awk -v line=$loopProgress 'NR==line' $LIBRARY/temp/Info/depends)
			elif [[ -z $(ls $LIBRARY/db | grep $(awk -v line=$loopProgress 'NR==line' $LIBRARY/temp/Info/depends)) ]]; then
				echo "ERROR: Dependency \""$(awk -v line=$loopProgress 'NR==line' $LIBRARY/temp/Info/depends)"\" is not installed."
				sudo rm $LIBRARY/lock
				exit
			fi
		done
	fi
}

function conflictCheck() {
	echo "Checking for conflicts..."
	if [[ -e $LIBRARY/temp/Info/conflicts ]]; then
		echo "This package conflicts: "$(cat $LIBRARY/temp/Info/conflicts)
		declare -i loopset=$(wc -l < $LIBRARY/temp/Info/conflicts)
		declare -i loopProgress=0
		echo "Total conflicts:" $loopset
		echo "Checking conflicts installation..."
		while [[ $loopset -gt $loopProgress ]]; do
			loopProgress=$(( $loopProgress + 1 ))
			if [[ -z $(awk -v line=$loopProgress 'NR==line' $LIBRARY/temp/Info/conflicts) ]]; then
				echo "Warning: conflict list has empty line: " $(awk -v line=$loopProgress 'NR==line' $LIBRARY/temp/Info/conflicts)
			elif [[ ! -z $(ls $LIBRARY/db | grep $(awk -v line=$loopProgress 'NR==line' $LIBRARY/temp/Info/conflicts)) ]]; then
				echo "ERROR: Conflicting package \""$(awk -v line=$loopProgress 'NR==line' $LIBRARY/temp/Info/conflicts)"\" is installed."
				sudo rm $LIBRARY/lock
				exit
			fi
		done
	fi
}

if [[ -z $args ]]; then
	$LIBRARY/binary/mpkg-manual
	exit
fi
if [[ -e $LIBRARY/convert_failed ]]; then
	echo "WARNING! DEPRICATED DATABASE CONVERSION FAILED."
fi
if [[ $args == "-i" ]]; then
	echo "Running Macintosh Packager..."
	if [[ -e $LIBRARY/convert_failed ]]; then
		echo "WARNING! DEPRICATED DATABASE CONVERSION FAILED."
	fi
	if [ "$EUID" -ne 0 ]; then 
		echo "Not enough permission!"
	 	exit
	fi
	if [[ -z "$pkg" ]]; then
		echo "E:35"
		echo "No package specified!"
		exit
	fi
	if [[ ! -e "$pkg" ]]; then
		echo "E:30"
		echo "No such package found!"
		exit
	fi
	if [[ -e $LIBRARY/lock ]]; then
		echo "E:00"
		echo "MPKG LOCKED"
		exit
	fi
	if [[ -z $(echo "$pkg"|grep ".mpack") ]]; then
		if [[ -z $(echo "$pkg"|grep ".mp") ]]; then
			if [[ -e $LIBRARY/binary/LegacyPackageCompatibilityLayer ]]; then
				sudo LegacyPackageCompatibilityLayer -i $pkg $3 $4
				exit
			else
				echo "This package requires mpkg <= 3.1 (Relatively unstable) or LegacyPackageCompatibilityLayer installed."
				exit
			fi
		else
			echo "E:36"
			echo "It is not a mpkg package!"
			exit
		fi
	else
		echo "Locking mpkg..."
		sudo touch $LIBRARY/lock
		echo "Unpacking..."
		if [ ! -e $LIBRARY/temp ]; then
			sudo mkdir $LIBRARY/temp
		else
			echo "W:30"
			echo "It seems last process uncleanly finished..."
			sudo rm -r $LIBRARY/temp
			sudo mkdir $LIBRARY/temp
		fi
		cp "$pkg" $LIBRARY/temp/
		if [ ! -e $LIBRARY/temp/*.mpack ]; then
			echo "E:31"
			echo "Failed to unpack."
			sudo rm -r $LIBRARY/temp
			sudo rm $LIBRARY/lock
			exit
		fi
		mv $LIBRARY/temp/*.mpack $LIBRARY/temp/package.zip
		unzip -qq $LIBRARY/temp/package.zip -d $LIBRARY/temp
		if [ ! -e $LIBRARY/temp/Info.zip ]; then
			echo "E:22"
			echo "Package Corruption (No Control Cluster). Unable to continue."
			sudo rm -r $LIBRARY/temp
			sudo rm $LIBRARY/lock
			exit
		fi
		if [ ! -e $LIBRARY/temp/Payload.zip ]; then
			echo "E:23"
			echo "Package Corruption (No Payload). Unable to continue."
			sudo rm -r $LIBRARY/temp
			sudo rm $LIBRARY/lock
			exit
		fi
		mkdir $LIBRARY/temp/Info
		unzip -qq $LIBRARY/temp/Info.zip -d $LIBRARY/temp/Info
	fi
	if [[ -e $LIBRARY/temp/Info/os-architecture ]]; then
		ARCHITECTURE=$(<$LIBRARY/temp/Info/os-architecture)
		if [[ -z $(uname | grep $ARCHITECTURE) ]]; then
			echo "E:40"
			echo "OS Architecture mismatch."
			sudo rm -r $LIBRARY/temp
			sudo rm $LIBRARY/lock
			exit
		fi
	fi
	checkLocalSignature
	if [[ -e $LIBRARY/convert_failed ]]; then
		echo "WARNING! DEPRICATED DATABASE CONVERSION FAILED."
	fi
	mkdir $LIBRARY/temp/Payload
	unzip -qq $LIBRARY/temp/Payload.zip -d $LIBRARY/temp/Payload
	if [[ -e $LIBRARY/temp/userPayload.zip ]]; then
		mkdir $LIBRARY/temp/userPayload
		unzip -qq $LIBRARY/temp/userPayload.zip -d $LIBRARY/temp/userPayload
	fi
	if [[ ! -e $LIBRARY/temp/Info/pkgname ]]; then
		echo "E:37"
		echo "Package Corruption (No PN control). Unable to continue."
		sudo rm -r $LIBRARY/temp
		sudo rm $LIBRARY/lock
		exit
	elif [[ ! -e $LIBRARY/temp/Info/version ]]; then
		echo "E:38"
		echo "Package Corruption (No Version control). Unable to continue."
		sudo rm -r $LIBRARY/temp
		sudo rm $LIBRARY/lock
		exit
	elif [[ ! -e $LIBRARY/temp/Info/pkgid ]]; then
		echo "E:38"
		echo "Package Corruption (No PI control). Unable to continue."
		sudo rm -r $LIBRARY/temp
		sudo rm $LIBRARY/lock
		exit
	fi
	if [[ ! -e $LIBRARY/temp/Payload ]]; then
		echo "E:39"
		echo "Package Corruption (No payload). Unable to continue."
		sudo rm -r $LIBRARY/temp
		sudo rm $LIBRARY/lock
		exit
	fi
	echo "Installing "$(<$LIBRARY/temp/Info/pkgname)"..."
	echo "Selecting "$(<$LIBRARY/temp/Info/pkgid) $(<$LIBRARY/temp/Info/version)" to install..."
	if [[ ! -z $(ls $LIBRARY/db | grep $(<$LIBRARY/temp/Info/pkgid)) ]]; then
		echo $(<$LIBRARY/temp/Info/pkgid) "is already installed."
		if [[ -e $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/unremovable ]]; then
			echo "E:51"
			echo "This package cannot be reinstalled, because it is unremovable flag is on for this package ID."
			sudo rm -r $LIBRARY/temp
			sudo rm $LIBRARY/lock
			exit
		fi
		if [[ $(<$LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/version) == $(<$LIBRARY/temp/Info/version) ]]; then
			if [[ $3 == "--override" ]]; then
				echo "Reinstalling package..."
			else
				echo "E:26"
				echo $(<$LIBRARY/temp/Info/pkgid) "is already installed with same version."
				echo "Process stopped for package protection."
				echo "To override, add --override after the package address."
				sudo rm -r $LIBRARY/temp
				sudo rm $LIBRARY/lock
				exit
			fi
		else
			echo "Upgrading package..."
		fi
	else
		echo "This package is not installed yet."
	fi
	if [[ -e $LIBRARY/convert_failed ]]; then
		echo "WARNING! DEPRICATED DATABASE CONVERSION FAILED."
	fi
	if [[ -e $LIBRARY/temp/Info/compatibility.sh ]]; then
		echo "Checking compatibility..."
		sudo $LIBRARY/temp/Info/compatibility.sh $LIBRARY/temp/Info
		if [[ -e $LIBRARY/temp/Info/compatibility-warning ]]; then
			echo "!WARNING!!!!!!!!!!!"
			echo "The package warned with the compatibility."
			echo "Please be careful while using the package."
			echo "!END OF WARNING!!!!"
		elif [[ -e $LIBRARY/temp/Info/compatibility-error ]]; then
			echo "E:99"
			echo "This package is incompatible."
			echo "Package installer returned exit code -9."
			sudo rm -r $LIBRARY/temp
			sudo rm $LIBRARY/lock
			exit
		else
			echo "Compatibility check complete."
		fi
	fi
	dependencyCheck
	conflictCheck
	if [[ -e $LIBRARY/temp/Info/preinst.sh ]]; then
		echo "Running preinst..."
		sudo $LIBRARY/temp/Info/preinst.sh
	fi
	echo "Removing Finder Elements..."
	sudo find $LIBRARY/temp -name ".DS_Store" -exec rm {} \;
	echo "Installing..."
	sudo cp -r $LIBRARY/temp/Payload/* $ROOTFS
	if [[ -e $LIBRARY/temp/userPayload ]]; then
		echo "Userpayload detected...!"
		if [[ -e $LIBRARY/usersupport/localuser ]]; then
			echo "User directory: "$(<$LIBRARY/usersupport/localuser)
			sudo cp -r $LIBRARY/temp/userPayload/* $(<$LIBRARY/usersupport/localuser)
		else
			echo "This package requires \"libusersupport\" to copy user library."
			echo "RootFS Payload will be copied, but userpayload will NOT be copied, since there is no supporting layer."
			echo "Please install libusersupport first, then reinstall this package."
			echo "MISSING USERPAYLOAD MAY CAUSE SERIOUS MALFUNCTION OF PACKAGE, AND MAY LEAD TO DAMANGING THE MACHINE."
			sudo touch $LIBRARY/temp/userpayloadnotcopied
		fi
	fi
	if [[ -e $LIBRARY/temp/Info/postinst.sh ]]; then
		echo "Running postinst..." 
		sudo $LIBRARY/temp/Info/postinst.sh
	fi
	echo "Installing controls..."
	if [[ ! -e $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid) ]]; then
		sudo mkdir $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)
	fi
	sudo cp $LIBRARY/temp/Info/* $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/
	echo "Writing connected files to database..."
	sudo find $LIBRARY/temp/Payload -not -type d | grep $LIBRARY/temp/Payload > $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/files
	sudo sed -i '' s/$SEDLIB/\\// $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/files
	sudo sed -i '' s/Thumbs.db// $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/files
	sudo sed -i '' s/.DS_Store// $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/files
	sudo sed -i '' s/\\/usr\\/local\\/mpkglib\\/temp\\/Payload// $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/files
	if [[ -e $LIBRARY/temp/userPayload ]]; then
		if [[ ! -e $LIBRARY/temp/userpayloadnotcopied ]]; then
			sudo find $LIBRARY/temp/userPayload -not -type d | grep $LIBRARY/temp/userPayload > $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/userfiles
			sudo sed -i '' s/$SEDLIB/\\// $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/userfiles
			sudo sed -i '' s/Thumbs.db// $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/userfiles
			sudo sed -i '' s/.DS_Store// $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/userfiles
			sudo sed -i '' s/\\/usr\\/local\\/mpkglib\\/temp\\/userPayload// $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/userfiles
		else
			echo "Userpayload is not copied, so will not be added to database."
			sudo rm $LIBRARY/temp/userpayloadnotcopied
		fi
	fi
	echo "Analysis written to database."
	if [[ -e $LIBRARY/convert_failed ]]; then
		echo "WARNING! DEPRICATED DATABASE CONVERSION FAILED."
	fi
	echo "Finished installing:" $(<$LIBRARY/temp/Info/pkgname) $(<$LIBRARY/temp/Info/version)
	if [[ -e $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/depends ]]; then
		if [[ ! -z $(cat $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/depends | grep "com.zeone.osxsubstrate") ]]; then
			echo "Requires Substrate Hookup."
			if [[ -z $(ls $LIBRARY/db | grep "com.zeone.osxsubstrate") ]]; then
				echo "Substrate is not installed!"
				echo "This package has to be removed."
				echo "Uninstalling..."
				if [[ -e $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/prerm.sh ]]; then
					echo "Running prerm..."
					$LIBRARY/db/"$pkg"/prerm.sh
				fi
				echo "Removing data..."
				sudo rm -r $(<$LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/files)
				if [[ -e $LIBRARY/db/"$pkg"/postrm.sh ]]; then
					echo "Running postrm..."
					$LIBRARY/db/"$pkg"/postrm.sh
				fi
				echo "Removing control..."
				removalID=$(<$LIBRARY/temp/Info/pkgid)
				sudo rm -r $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)
			else
				echo "Reloading substrate database..."
				/usr/local/substratelib/substrate --reload
				echo "Done."
			fi
		fi
	fi
	if [[ -e $LIBRARY/temp/Info/changelog ]]; then
		echo "Changelog ========================"
		cat $LIBRARY/temp/Info/changelog
		echo "=================================="
	fi
	echo "Cleaning up..."
	sudo rm -r $LIBRARY/temp
	sudo rm $LIBRARY/lock
	exit
fi
if [[ $args == "-r" ]]; then
	if [ "$EUID" -ne 0 ]; then 
		echo "Not enough permission!"
	 	exit
	fi 
	if [[ -z "$pkg" ]]; then
		echo "E:35"
		echo "No package specified!"
		exit
	fi
	if [[ "$pkg" == "mpkg" ]]; then
		if [[ ! -z $(ls $LIBRARY/db) ]]; then
			echo "E:62"
			echo "There are packages that are need to be uninstalled first."
			exit
		fi
	fi
	if [[ -z $(ls $LIBRARY/db | grep "$pkg") ]]; then
		echo "Package does not exist. Unable to remove."
		echo "Type mpkg -l to see the installed packages."
		exit
	fi
	echo "Locking mpkg..."
	sudo touch $LIBRARY/lock
	echo "Checking for dependencies..."
	sudo find $LIBRARY/db -name "depends">$LIBRARY/cache/dependencies-list
	echo "Search complete..."
	if [[ $3 == "--debug" ]]; then
		cat $LIBRARY/cache/dependencies-list
	fi
	declare -i listloopset=$(wc -l < $LIBRARY/cache/dependencies-list)
	declare -i listloopProgress=0
	echo "Reading dependency lists..."
	while [[ $listloopset -gt $listloopProgress ]]; do
		listloopProgress=$(( $listloopProgress + 1 ))
		Depends=$(awk -v line=$listloopProgress 'NR==line' $LIBRARY/cache/dependencies-list)
		cat $Depends>$LIBRARY/cache/dependencies
		echo "">>$LIBRARY/cache/dependencies
		if [[ $3 == "--debug" ]]; then
			echo "ListLoopSet: "$listloopset
			echo "ListLoop: "$listloopProgress
		fi
		declare -i loopset=$(wc -l < $LIBRARY/cache/dependencies)
		declare -i loopProgress=0
		while [[ $loopset -gt $loopProgress ]]; do
			loopProgress=$(( $loopProgress + 1 ))
			if [[ $3 == "--debug" ]]; then
				echo "loopset: "$loopset
				echo "loopProgress: "$loopProgress
			fi
			if [[ ! -z $(awk -v line=$loopProgress 'NR==line' $LIBRARY/cache/dependencies | grep "$pkg") ]]; then
				echo "A package depends on this package."
				echo "E:63"
				echo "Package removal stopped."
				sudo rm $LIBRARY/lock
				sudo rm $LIBRARY/cache/dependencies
				sudo rm $LIBRARY/cache/dependencies-list
				exit
			elif [[ $3 == "--debug" ]]; then
				echo $(awk -v line=$loopProgress 'NR==line' $LIBRARY/cache/dependencies) "is not depended package"
				echo "ListLoopProgress: "$ListLoopProgress
				echo "loopProgress: "$loopProgress
			fi
		done
	done
	sudo rm $LIBRARY/cache/dependencies
	sudo rm $LIBRARY/cache/dependencies-list
	if [[ -e $LIBRARY/db/"$pkg"/unremovable ]]; then
		echo "E:50"
		echo "Removal is blocked."
		sudo rm $LIBRARY/lock
		exit
	elif [[ ! -e $LIBRARY/db/"$pkg"/files ]]; then
		echo "E:25"
		echo "No file connection data!"
		sudo rm $LIBRARY/lock
		exit
	else
		echo "Uninstalling..."
		if [[ -e $LIBRARY/db/"$pkg"/prerm.sh ]]; then
			echo "Running prerm..."
			$LIBRARY/db/"$pkg"/prerm.sh
		fi
		echo "Removing data..."
		declare -i loopset=$(wc -l < $LIBRARY/db/"$pkg"/files)
		declare -i loopProgress=0
		while [[ $loopset -gt $loopProgress ]]; do
			loopProgress=$(( $loopProgress + 1 ))
			sudo rm -rf $(awk -v line=$loopProgress 'NR==line' $LIBRARY/db/"$pkg"/files)
		done
		if [[ -e $LIBRARY/db/"$pkg"/userfiles ]]; then
			echo "Removing user data..."
			declare -i loopset=$(wc -l < $LIBRARY/db/"$pkg"/userfiles)
			declare -i loopProgress=0
			while [[ $loopset -gt $loopProgress ]]; do
				loopProgress=$(( $loopProgress + 1 ))
				sudo rm -rf "$(<$LIBRARY/usersupport/localuser)"/"$(awk -v line=$loopProgress 'NR==line' $LIBRARY/db/"$pkg"/userfiles)"
			done
		fi
		if [[ -e $LIBRARY/db/"$pkg"/postrm.sh ]]; then
			echo "Running postrm..."
			$LIBRARY/db/"$pkg"/postrm.sh
		fi
		if [[ -e $LIBRARY/db/"$pkg"/depends ]]; then
			if [[ ! -z $(cat $LIBRARY/db/"$pkg"/depends | grep "com.zeone.osxsubstrate") ]]; then
				echo "Reloading Substrate database..."
				/usr/local/substratelib/substrate --reload
				echo "Finished."
			fi
		fi
		echo "Removing control..."
		sudo rm -r $LIBRARY/db/"$pkg"
		sudo rm $LIBRARY/lock
		exit
	fi
fi
if [[ $args == "-h" ]]; then
	$LIBRARY/binary/mpkg-manual
	exit
fi
if [[ $args == "--block-removal" ]]; then
	if [[ -z $2 ]]; then
		echo "Missing argument: package id"
		exit
	elif [[ ! -e $LIBRARY/db/$2 ]]; then
		echo "Package is not installed."
		exit
	else
		echo "If you block removal:"
		echo "Unable to reinstall the package"
		echo "Unable to upgrade the package"
		echo "Unable to remove the package"
		echo "This action is irrevokable. Are you sure you want to continue? y/n (MUST BE LOWER CASE)"
		read flag
		if [[ $flag == "y" ]]; then
			echo "Locking mpkg..."
			touch $LIBRARY/lock
			echo "Removing file connection from db..."
			sudo rm $LIBRARY/db/$2/files
			if [[ -e $LIBRARY/db/$2/userfiles ]]; then
				sudo rm $LIBRARY/db/$2/userfiles
			fi
			echo "Adding unremovable flag..."
			sudo touch $LIBRARY/db/$2/unremovable
			echo "Done."
			sudo rm $LIBRARY/lock
		else
			echo "Aborted."
			exit
		fi
	fi
fi
if [[ $args == "--force-unlock" ]]; then
	echo "Forcing mpkg unlock..."
	sudo rm $LIBRARY/lock
	echo "Done."
	exit
fi
if [[ $args == "-v" ]]; then
	echo "Macintosh Packager"
	echo "Version "$(<$LIBRARY/db/mpkg/version)
	exit
fi
if [[ $args == "-p" ]]; then
	if [[ -z "$pkg" ]]; then
		echo "E:35"
		echo "No package specified!"
		exit
	fi
	echo "Package Info:"
	echo "Name:" $(<$LIBRARY/db/"$pkg"/pkgname)
	echo "ID:" $(<$LIBRARY/db/"$pkg"/pkgid)
	echo "Version:" $(<$LIBRARY/db/"$pkg"/version)
	exit
fi
if [[ $args == "-l" ]]; then
	ls $LIBRARY/db
	exit
fi
if [[ -z $args ]]; then
	$LIBRARY/binary/mpkg-manual
	exit
fi
