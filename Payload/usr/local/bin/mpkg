#!/bin/bash
args=$1
pkg=$2
ROOTFS="/"
LIBRARY="/usr/local/mpkglib"
SEDLIB="\\/usr\\/local\\/mpkglib\\/temp\\/Payload\\/"
target="/"
userpayloadtarget="nil"

RED='\033[0;31m'
GRN='\033[0;32m'
YEL='\033[0;33m'
BLU='\033[0;34m'
NC='\033[0m'

if [[ $3 == "--target" ]]; then
	if [[ -z $4 ]]; then
		echo -e "${RED}Error: Missing target path.${NC}"
		exit
	elif [[ ! -e $4 ]]; then
		echo -e "${RED}Error: Target does not exists.${NC}"
		exit
	elif [[ -z $(file $4 | grep ": directory") ]]; then
		echo "${RED}Error: Target is not a directory.${NC}"
		exit
	else
		target=$4
		echo -e -e "${YEL}Warning: Modified installation destination target for system. This will NOT support removal.${NC}"
	fi
fi
if [[ $5 == "--usertarget" ]]; then
	if [[ -z $6 ]]; then
		echo -e "${RED}Error: Missing target path.${NC}"
		exit
	elif [[ ! -e $6 ]]; then
		echo -e "${RED}Error: Target does not exists.${NC}"
		exit
	elif [[ -z $(file $6 | grep ": directory") ]]; then
		echo -e "${RED}Error: Target is not a directory.${NC}"
		exit
	else
		userpayloadtarget=$6
		echo -e "${YEL}Warning: Modified installation destination target for user. This will NOT support removal.${NC}"
	fi
fi
function dependencyCheck() {
	echo "Checking for dependencies..."
	if [[ -e $LIBRARY/temp/Info/depends ]]; then
		echo -e "${YEL}This package depends: "$(cat $LIBRARY/temp/Info/depends)"${NC}"
		declare -i loopset=$(wc -l < $LIBRARY/temp/Info/depends)
		declare -i loopProgress=0
		echo "Total dependencies required:" $loopset
		echo "Checking dependencies installation..."
		while [[ $loopset -gt $loopProgress ]]; do
			loopProgress=$(( $loopProgress + 1 ))
			if [[ -z $(awk -v line=$loopProgress 'NR==line' $LIBRARY/temp/Info/depends) ]]; then
				echo -e "${YEL}Warning: Dependency list has empty line: " $(awk -v line=$loopProgress 'NR==line' $LIBRARY/temp/Info/depends) "${NC}"
			elif [[ -z $(ls $LIBRARY/db | grep $(awk -v line=$loopProgress 'NR==line' $LIBRARY/temp/Info/depends)) ]]; then
				echo -e "${RED}Error: Dependency \""$(awk -v line=$loopProgress 'NR==line' $LIBRARY/temp/Info/depends)"\" is not installed.${NC}"
				sudo rm $LIBRARY/lock
				exit
			fi
		done
	fi
}

function conflictCheck() {
	echo "Checking for conflicts..."
	if [[ -e $LIBRARY/temp/Info/conflicts ]]; then
		echo -e "${YEL}This package conflicts: "$(cat $LIBRARY/temp/Info/conflicts)"${NC}"
		declare -i loopset=$(wc -l < $LIBRARY/temp/Info/conflicts)
		declare -i loopProgress=0
		echo "Total conflicts:" $loopset
		echo "Checking conflicts installation..."
		while [[ $loopset -gt $loopProgress ]]; do
			loopProgress=$(( $loopProgress + 1 ))
			if [[ -z $(awk -v line=$loopProgress 'NR==line' $LIBRARY/temp/Info/conflicts) ]]; then
				echo -e "${YEL}Warning: conflict list has empty line: " $(awk -v line=$loopProgress 'NR==line' $LIBRARY/temp/Info/conflicts)"${NC}"
			elif [[ ! -z $(ls $LIBRARY/db | grep $(awk -v line=$loopProgress 'NR==line' $LIBRARY/temp/Info/conflicts)) ]]; then
				echo -e "${RED}Error: Conflicting package \""$(awk -v line=$loopProgress 'NR==line' $LIBRARY/temp/Info/conflicts)"\" is installed.${NC}"
				sudo rm $LIBRARY/lock
				exit
			fi
		done
	fi
}

if [[ -z $args ]]; then
	$LIBRARY/binary/mpkg-manual
	exit
fi
if [[ -e $LIBRARY/convert_failed ]]; then
	echo -e "${YEL}Warning! DEPRICATED DATABASE CONVERSION FAILED.${NC}"
fi
if [[ $args == "-i" ]]; then
	echo "Running Macintosh Packager..."
	if [[ -e $LIBRARY/convert_failed ]]; then
		echo -e "${YEL}Warning! DEPRICATED DATABASE CONVERSION FAILED.${NC}"
	fi
	if [ "$EUID" -ne 0 ]; then 
		echo -e "${RED}Error: Not enough permission!${NC}"
	 	exit
	fi
	if [[ -z "$pkg" ]]; then
		echo -e "${RED}E:35${NC}"
		echo -e "${RED}Error: No package specified!${NC}"
		exit
	fi
	if [[ ! -e "$pkg" ]]; then
		echo -e "${RED}E:30${NC}"
		echo -e "${RED}Error: No such package found!${NC}"
		exit
	fi
	if [[ -e $LIBRARY/lock ]]; then
		echo -e "${RED}E:00${NC}"
		echo -e "${RED}Error: MPKG LOCKED${NC}"
		exit
	fi
	if [[ -z $(echo "$pkg"|grep ".mpack") ]]; then
		if [[ -z $(echo "$pkg"|grep ".mp") ]]; then
			if [[ -e $LIBRARY/binary/LegacyPackageCompatibilityLayer ]]; then
				sudo LegacyPackageCompatibilityLayer -i $pkg $3
				exit
			else
				echo -e "${RED}Error: This package requires mpkg <= 3.1 (Relatively unstable) or LegacyPackageCompatibilityLayer installed.${NC}"
				exit
			fi
		else
			echo -e "${RED}E:36${NC}"
			echo -e "${RED}Error: It is not a mpkg package!${NC}"
			exit
		fi
	else
		echo "Locking mpkg..."
		sudo touch $LIBRARY/lock
		echo "Unpacking..."
		if [ ! -e $LIBRARY/temp ]; then
			sudo mkdir $LIBRARY/temp
		else
			echo -e "${YEL}W:30${NC}"
			echo -e "${YEL}It seems last process uncleanly finished...${NC}"
			sudo rm -r $LIBRARY/temp
			sudo mkdir $LIBRARY/temp
		fi
		cp "$pkg" $LIBRARY/temp/
		if [ ! -e $LIBRARY/temp/*.mpack ]; then
			echo -e "${RED}E:31${NC}"
			echo -e "${RED}Error: Failed to unpack.${NC}"
			sudo rm -r $LIBRARY/temp
			sudo rm $LIBRARY/lock
			exit
		fi
		mv $LIBRARY/temp/*.mpack $LIBRARY/temp/package.zip
		unzip -qq $LIBRARY/temp/package.zip -d $LIBRARY/temp
		if [ ! -e $LIBRARY/temp/Info.zip ]; then
			echo -e "${RED}E:22${NC}"
			echo -e "${RED}Error: Package Corruption (No Control Cluster). Unable to continue.${NC}"
			sudo rm -r $LIBRARY/temp
			sudo rm $LIBRARY/lock
			exit
		fi
		if [ ! -e $LIBRARY/temp/Payload.zip ]; then
			echo -e "${RED}E:23${NC}"
			echo -e "${RED}Error: Package Corruption (No Payload). Unable to continue.${NC}"
			sudo rm -r $LIBRARY/temp
			sudo rm $LIBRARY/lock
			exit
		fi
		mkdir $LIBRARY/temp/Info
		unzip -qq $LIBRARY/temp/Info.zip -d $LIBRARY/temp/Info
	fi
	if [[ -e $LIBRARY/temp/Info/os-architecture ]]; then
		ARCHITECTURE=$(<$LIBRARY/temp/Info/os-architecture)
		if [[ -z $(uname | grep $ARCHITECTURE) ]]; then
			echo -e "${RED}E:40${NC}"
			echo -e "${RED}Error: OS Architecture mismatch.${NC}"
			sudo rm -r $LIBRARY/temp
			sudo rm $LIBRARY/lock
			exit
		fi
	fi
	if [[ -e $LIBRARY/convert_failed ]]; then
		echo -e "${YEL}Warning! DEPRICATED DATABASE CONVERSION FAILED.${NC}"
	fi
	mkdir $LIBRARY/temp/Payload
	unzip -qq $LIBRARY/temp/Payload.zip -d $LIBRARY/temp/Payload
	if [[ -e $LIBRARY/temp/userPayload.zip ]]; then
		mkdir $LIBRARY/temp/userPayload
		unzip -qq $LIBRARY/temp/userPayload.zip -d $LIBRARY/temp/userPayload
	fi
	if [[ ! -e $LIBRARY/temp/Info/pkgname ]]; then
		echo -e "${RED}E:37${NC}"
		echo -e "${RED}Package Corruption (No PN control). Unable to continue.${NC}"
		sudo rm -r $LIBRARY/temp
		sudo rm $LIBRARY/lock
		exit
	elif [[ ! -e $LIBRARY/temp/Info/version ]]; then
		echo -e "${RED}E:38${NC}"
		echo -e "${RED}Package Corruption (No Version control). Unable to continue.${NC}"
		sudo rm -r $LIBRARY/temp
		sudo rm $LIBRARY/lock
		exit
	elif [[ ! -e $LIBRARY/temp/Info/pkgid ]]; then
		echo -e "${RED}E:38${NC}"
		echo -e "${RED}Error: Package Corruption (No PI control). Unable to continue.${NC}"
		sudo rm -r $LIBRARY/temp
		sudo rm $LIBRARY/lock
		exit
	fi
	if [[ ! -e $LIBRARY/temp/Payload ]]; then
		echo -e "${RED}E:39${NC}"
		echo -e "${RED}Error: Package Corruption (No payload). Unable to continue.${NC}"
		sudo rm -r $LIBRARY/temp
		sudo rm $LIBRARY/lock
		exit
	fi
	echo "Installing "$(<$LIBRARY/temp/Info/pkgname)"..."
	echo "Selecting "$(<$LIBRARY/temp/Info/pkgid) $(<$LIBRARY/temp/Info/version)" to install..."
	if [[ ! -z $(ls $LIBRARY/db | grep $(<$LIBRARY/temp/Info/pkgid)) ]]; then
		echo -e "${YEL}"$(<$LIBRARY/temp/Info/pkgid) "is already installed.${NC}"
		if [[ -e $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/unremovable ]]; then
			echo -e "${RED}E:51${NC}"
			echo -e "${RED}Error: This package cannot be reinstalled, because it is unremovable flag is on for this package ID.${NC}"
			sudo rm -r $LIBRARY/temp
			sudo rm $LIBRARY/lock
			exit
		fi
		if [[ $(<$LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/version) == $(<$LIBRARY/temp/Info/version) ]]; then
			if [[ $3 == "--override" ]]; then
				echo "Reinstalling package..."
			else
				echo -e "${RED}E:26${NC}"
				echo -e "${RED}Error: "$(<$LIBRARY/temp/Info/pkgid) "is already installed with same version.${NC}"
				echo -e "${RED}Process stopped for package protection.${NC}"
				echo -e "${BLU}To override, add --override after the package address.${NC}"
				sudo rm -r $LIBRARY/temp
				sudo rm $LIBRARY/lock
				exit
			fi
		else
			echo "Upgrading package..."
		fi
	else
		echo "This package is not installed yet."
	fi
	if [[ -e $LIBRARY/convert_failed ]]; then
		echo -e "${YEL}Warning! DEPRICATED DATABASE CONVERSION FAILED.${NC}"
	fi
	if [[ -e $LIBRARY/temp/Info/compatibility.sh ]]; then
		echo "Checking compatibility..."
		sudo $LIBRARY/temp/Info/compatibility.sh $LIBRARY/temp/Info
		if [[ -e $LIBRARY/temp/Info/compatibility-warning ]]; then
			echo -e "${YEL}Compatibility warning detected...${NC}"
		elif [[ -e $LIBRARY/temp/Info/compatibility-error ]]; then
			echo -e "${RED}E:99${NC}"
			echo -e "${RED}Error: This package is incompatible.${NC}"
			sudo rm -r $LIBRARY/temp
			sudo rm $LIBRARY/lock
			exit
		else
			echo -e "${GRN}Compatibility check complete.${NC}"
		fi
	fi
	dependencyCheck
	conflictCheck
	if [[ -e $LIBRARY/temp/Info/preinst.sh ]]; then
		echo "Running preinst..."
		sudo $LIBRARY/temp/Info/preinst.sh
	fi
	echo "Removing Finder Elements..."
	sudo find $LIBRARY/temp -name ".DS_Store" -exec rm {} \;
	echo "Installing..."
	if [[ $target == "/" ]]; then
		sudo cp -r $LIBRARY/temp/Payload/* $ROOTFS
	else
		sudo cp -r $LIBRARY/temp/Payload/* $target
	fi
	if [[ -e $LIBRARY/temp/userPayload ]]; then
		echo "Userpayload detected...!"
		if [[ -e $LIBRARY/usersupport/localuser ]]; then
			echo "User directory: "$(<$LIBRARY/usersupport/localuser)
			if [[ $userpayloadtarget == "nil" ]]; then
				sudo cp -r $LIBRARY/temp/userPayload/* $(<$LIBRARY/usersupport/localuser)
			else
				sudo cp -r $LIBRARY/temp/userPayload/* $userpayloadtarget
			fi
		else
			echo -e "${YEL}This package requires \"libusersupport\" to copy user library.${NC}"
			echo -e "${YEL}RootFS Payload will be copied, but userpayload will NOT be copied, since there is no supporting layer.${NC}"
			echo -e "${YEL}Please install libusersupport first, then reinstall this package.${NC}"
			echo -e "${RED}MISSING USERPAYLOAD MAY CAUSE SERIOUS MALFUNCTION OF PACKAGE, AND MAY LEAD TO DAMANGING THE MACHINE.${NC}"
			sudo touch $LIBRARY/temp/userpayloadnotcopied
		fi
	fi
	if [[ -e $LIBRARY/temp/Info/postinst.sh ]]; then
		echo "Running postinst..." 
		sudo $LIBRARY/temp/Info/postinst.sh
	fi
	echo "Installing controls..."
	if [[ ! -e $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid) ]]; then
		sudo mkdir $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)
	fi
	sudo cp $LIBRARY/temp/Info/* $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/
	if [[ $target == "/" ]]; then
		echo "Writing connected files to database..."
		sudo find $LIBRARY/temp/Payload -not -type d | grep $LIBRARY/temp/Payload > $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/files
		sudo sed -i '' s/$SEDLIB/\\// $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/files
		sudo sed -i '' s/Thumbs.db// $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/files
		sudo sed -i '' s/.DS_Store// $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/files
		sudo sed -i '' s/\\/usr\\/local\\/mpkglib\\/temp\\/Payload// $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/files
	else
		echo -e "${YEL}Skipped index writing.${NC}"
		touch $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/files
	fi
	if [[ -e $LIBRARY/temp/userPayload ]]; then
		if [[ $userpayloadtarget == "nil" ]]; then
			if [[ ! -e $LIBRARY/temp/userpayloadnotcopied ]]; then
				sudo find $LIBRARY/temp/userPayload -not -type d | grep $LIBRARY/temp/userPayload > $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/userfiles
				sudo sed -i '' s/$SEDLIB/\\// $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/userfiles
				sudo sed -i '' s/Thumbs.db// $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/userfiles
				sudo sed -i '' s/.DS_Store// $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/userfiles
				sudo sed -i '' s/\\/usr\\/local\\/mpkglib\\/temp\\/userPayload// $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/userfiles
			else
				echo -e "${RED}Userpayload is not copied, so will not be added to database.${NC}"
				sudo rm $LIBRARY/temp/userpayloadnotcopied
			fi
		else
			echo -e "${YEL}Skipped user index writing.${NC}"
			touch $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/userfiles
		fi
	fi
	echo -e "${GRN}Analysis written to database.${NC}"
	if [[ -e $LIBRARY/convert_failed ]]; then
		echo -e "${YEL}Warning! DEPRICATED DATABASE CONVERSION FAILED.${NC}"
	fi
	if [[ $3 == "--target" ]]; then
		echo -e "${YEL}Temporarily unlocking mpkg for subprocess...${NC}"
		sudo rm $LIBRARY/lock
		sudo mpkg -b $(<$LIBRARY/temp/Info/pkgid) -y
		echo "Relocking..."
		sudo touch $LIBRARY/lock
		sudo rm $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/unremovable
	elif [[ $4 == "--usertarget" ]]; then
		echo -e "${YEL}Temporarily unlocking mpkg for subprocess...${NC}"
		sudo rm $LIBRARY/lock
		sudo mpkg -b $(<$LIBRARY/temp/Info/pkgid) -y
		echo "Relocking..."
		sudo touch $LIBRARY/lock
		sudo rm $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/unremovable
	fi
	echo -e "${GRN}Finished installing:" $(<$LIBRARY/temp/Info/pkgname) $(<$LIBRARY/temp/Info/version)"${NC}"
	if [[ -e $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/depends ]]; then
		if [[ ! -z $(cat $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/depends | grep "com.zeone.osxsubstrate") ]]; then
			echo -e "${YEL}Requires Substrate Hookup.${NC}"
			if [[ -z $(ls $LIBRARY/db | grep "com.zeone.osxsubstrate") ]]; then
				echo -e "${RED}Error: Substrate is not installed!${NC}"
				echo -e "${YEL}This package has to be removed.${NC}"
				echo "Uninstalling..."
				if [[ -e $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/prerm.sh ]]; then
					echo "Running prerm..."
					$LIBRARY/db/"$pkg"/prerm.sh
				fi
				echo "Removing data..."
				sudo rm -r $(<$LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)/files)
				if [[ -e $LIBRARY/db/"$pkg"/postrm.sh ]]; then
					echo "Running postrm..."
					$LIBRARY/db/"$pkg"/postrm.sh
				fi
				echo "Removing control..."
				removalID=$(<$LIBRARY/temp/Info/pkgid)
				sudo rm -r $LIBRARY/db/$(<$LIBRARY/temp/Info/pkgid)
			else
				echo "Reloading substrate database..."
				/usr/local/substratelib/substrate --reload
				echo -e "${GRN}Done.${NC}"
			fi
		fi
	fi
	if [[ -e $LIBRARY/temp/Info/changelog ]]; then
		if [[ -z $(<$LIBRARY/temp/Info/changelog) ]]; then
			echo -e "${YEL}Skipped changelog because it is empty.${NC}"
		else
			echo "Changelog ========================"
			cat $LIBRARY/temp/Info/changelog
			echo "=================================="
		fi
	fi
	echo "Cleaning up..."
	sudo rm -r $LIBRARY/temp
	sudo rm $LIBRARY/lock
	echo -e "${GRN}Done.${NC}"
	exit
fi
if [[ $args == "-r" ]]; then
	if [ "$EUID" -ne 0 ]; then 
		echo -e "${RED}Error: Not enough permission!${NC}"
	 	exit
	fi 
	if [[ -z "$pkg" ]]; then
		echo -e "${RED}E:35${NC}"
		echo -e "${RED}Error: No package specified!${NC}"
		exit
	fi
	if [[ "$pkg" == "mpkg" ]]; then
		if [[ ! -z $(ls $LIBRARY/db) ]]; then
			echo -e "${RED}E:62${NC}"
			echo -e "${RED}Error: There are packages that are need to be uninstalled first.${NC}"
			exit
		fi
	fi
	if [[ -z $(ls $LIBRARY/db | grep "$pkg") ]]; then
		echo -e "${RED}Error: Package does not exist. Unable to remove.${NC}"
		echo "Type mpkg -l to see the installed packages."
		exit
	fi
	echo "Locking mpkg..."
	sudo touch $LIBRARY/lock
	echo "Checking for dependencies..."
	sudo find $LIBRARY/db -name "depends">$LIBRARY/cache/dependencies-list
	echo -e "${GRN}Search complete...${NC}"
	if [[ $3 == "--debug" ]]; then
		cat $LIBRARY/cache/dependencies-list
	fi
	declare -i listloopset=$(wc -l < $LIBRARY/cache/dependencies-list)
	declare -i listloopProgress=0
	echo "Reading dependency lists..."
	while [[ $listloopset -gt $listloopProgress ]]; do
		listloopProgress=$(( $listloopProgress + 1 ))
		Depends=$(awk -v line=$listloopProgress 'NR==line' $LIBRARY/cache/dependencies-list)
		cat $Depends>$LIBRARY/cache/dependencies
		echo "">>$LIBRARY/cache/dependencies
		if [[ $3 == "--debug" ]]; then
			echo "ListLoopSet: "$listloopset
			echo "ListLoop: "$listloopProgress
		fi
		declare -i loopset=$(wc -l < $LIBRARY/cache/dependencies)
		declare -i loopProgress=0
		while [[ $loopset -gt $loopProgress ]]; do
			loopProgress=$(( $loopProgress + 1 ))
			if [[ $3 == "--debug" ]]; then
				echo "loopset: "$loopset
				echo "loopProgress: "$loopProgress
			fi
			if [[ ! -z $(awk -v line=$loopProgress 'NR==line' $LIBRARY/cache/dependencies | grep "$pkg") ]]; then
				echo -e "${YEL}A package depends on this package.${NC}"
				echo -e "${RED}E:63${NC}"
				echo -e "${RED}Error: Package removal stopped.${NC}"
				sudo rm $LIBRARY/lock
				sudo rm $LIBRARY/cache/dependencies
				sudo rm $LIBRARY/cache/dependencies-list
				exit
			elif [[ $3 == "--debug" ]]; then
				echo $(awk -v line=$loopProgress 'NR==line' $LIBRARY/cache/dependencies) "is not depended package"
				echo "ListLoopProgress: "$ListLoopProgress
				echo "loopProgress: "$loopProgress
			fi
		done
	done
	sudo rm $LIBRARY/cache/dependencies
	sudo rm $LIBRARY/cache/dependencies-list
	if [[ -e $LIBRARY/db/"$pkg"/unremovable ]]; then
		echo -e "${RED}E:50${NC}"
		echo -e "${RED}Error: Removal is blocked.${NC}"
		sudo rm $LIBRARY/lock
		exit
	fi
	if [[ $3 -ne "--ctr-only" ]]; then
		if [[ ! -e $LIBRARY/db/"$pkg"/files ]]; then
			echo -e "${RED}E:25${NC}"
			echo -e "${RED}Error: No file connection data!${NC}"
			sudo rm $LIBRARY/lock
			exit
		else
			echo "Uninstalling..."
			if [[ -e $LIBRARY/db/"$pkg"/prerm.sh ]]; then
				echo "Running prerm..."
				$LIBRARY/db/"$pkg"/prerm.sh
			fi
			echo "Removing data..."
			declare -i loopset=$(wc -l < $LIBRARY/db/"$pkg"/files)
			declare -i loopProgress=0
			while [[ $loopset -gt $loopProgress ]]; do
				loopProgress=$(( $loopProgress + 1 ))
				sudo rm -rf $(awk -v line=$loopProgress 'NR==line' $LIBRARY/db/"$pkg"/files)
			done
			if [[ -e $LIBRARY/db/"$pkg"/userfiles ]]; then
				echo "Removing user data..."
				declare -i loopset=$(wc -l < $LIBRARY/db/"$pkg"/userfiles)
				declare -i loopProgress=0
				while [[ $loopset -gt $loopProgress ]]; do
					loopProgress=$(( $loopProgress + 1 ))
					sudo rm -rf "$(<$LIBRARY/usersupport/localuser)"/"$(awk -v line=$loopProgress 'NR==line' $LIBRARY/db/"$pkg"/userfiles)"
				done
			fi
			if [[ -e $LIBRARY/db/"$pkg"/postrm.sh ]]; then
				echo "Running postrm..."
				$LIBRARY/db/"$pkg"/postrm.sh
			fi
			if [[ -e $LIBRARY/db/"$pkg"/depends ]]; then
				if [[ ! -z $(cat $LIBRARY/db/"$pkg"/depends | grep "com.zeone.osxsubstrate") ]]; then
					echo "Reloading Substrate database..."
					/usr/local/substratelib/substrate --reload
					echo -e "${GRN}Finished.${NC}"
				fi
			fi
			echo "Removing control..."
			sudo rm -r $LIBRARY/db/"$pkg"
			sudo rm $LIBRARY/lock
			echo -e "${GRN}Done.${NC}"
			exit
		fi
	else
		echo "Removing control..."
		sudo rm -r $LIBRARY/db/"$pkg"
		sudo rm $LIBRARY/lock
		echo -e "${GRN}Done.${NC}"
		exit
	fi
fi
if [[ $args == "-h" ]]; then
	$LIBRARY/binary/mpkg-manual
	exit
fi
if [[ $args == "-b" ]]; then
	if [[ -z $2 ]]; then
		echo -e "${RED}Error: Missing argument: package id${NC}"
		exit
	elif [[ ! -e $LIBRARY/db/$2 ]]; then
		echo -e "${RED}Error: Package is not installed.${NC}"
		exit
	else
		if [[ $3 == "-y" ]]; then
			echo "Locking mpkg..."
			touch $LIBRARY/lock
			echo "Removing file connection from db..."
			sudo rm $LIBRARY/db/$2/files
			if [[ -e $LIBRARY/db/$2/userfiles ]]; then
				sudo rm $LIBRARY/db/$2/userfiles
			fi
			echo "Adding unremovable flag..."
			sudo touch $LIBRARY/db/$2/unremovable
			echo -e "${GRN}Done.${NC}"
			sudo rm $LIBRARY/lock
		else
			echo -e "${YEL}If you block removal:${NC}"
			echo -e "${YEL}Unable to reinstall the package${NC}"
			echo -e "${YEL}Unable to upgrade the package${NC}"
			echo -e "${YEL}Unable to remove the package${NC}"
			echo -e "${BLU}This action is irrevokable. Are you sure you want to continue? y/n (MUST BE LOWER CASE)${NC}"
			read flag
			if [[ $flag == "y" ]]; then
				echo "Locking mpkg..."
				touch $LIBRARY/lock
				echo "Removing file connection from db..."
				sudo rm $LIBRARY/db/$2/files
				if [[ -e $LIBRARY/db/$2/userfiles ]]; then
					sudo rm $LIBRARY/db/$2/userfiles
				fi
				echo "Adding unremovable flag..."
				sudo touch $LIBRARY/db/$2/unremovable
				echo -e "${GRN}Done.${NC}"
				sudo rm $LIBRARY/lock
			else
				echo -e "${GRN}Aborted.${NC}"
				exit
			fi
		fi
	fi
fi
if [[ $args == "--force-unlock" ]]; then
	echo "Forcing mpkg unlock..."
	sudo rm $LIBRARY/lock
	echo -e "${GRN}Done.${NC}"
	exit
fi
if [[ $args == "-v" ]]; then
	echo "Macintosh Packager"
	echo "Version "$(<$LIBRARY/db/mpkg/version)
	exit
fi
if [[ $args == "-p" ]]; then
	if [[ -z "$pkg" ]]; then
		echo -e "${RED}E:35${NC}"
		echo -e "${RED}Error: No package specified!${NC}"
		exit
	fi
	echo "Package Info:"
	echo "Name:" $(<$LIBRARY/db/"$pkg"/pkgname)
	echo "ID:" $(<$LIBRARY/db/"$pkg"/pkgid)
	echo "Version:" $(<$LIBRARY/db/"$pkg"/version)
	exit
fi
if [[ $args == "-l" ]]; then
	ls $LIBRARY/db
	exit
fi
if [[ -z $args ]]; then
	$LIBRARY/binary/mpkg-manual
	exit
fi
